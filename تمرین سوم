import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout, Input
from tensorflow.keras.models import Model
from tensorflow.keras.applications import ResNet50, VGG16, MobileNetV2  # انتخاب یکی از این‌ها
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

# ===============================
# ۱. تنظیمات اولیه
# ===============================
data_dir = "/path/to/UTKFace"  # مسیر دایرکتوری که تصاویر UTK در آن قرار دارند
img_size = (224, 224)  # اندازه ورودی تصاویر برای شبکه
batch_size = 32

# ===============================
# ۲. استخراج لیست تصاویر و برچسب سن
# ===============================
def parse_label_from_filename(fname):
    """
    ورودی: fname مانند "100_1_0_20170112215032192.jpg"
    خروجی: سن (int) و جنسیت (int)
    """
    base = os.path.basename(fname)
    name = os.path.splitext(base)[0]
    parts = name.split('_')
    age = int(parts[0])
    gender = int(parts[1])
    return age, gender

# تهیه لیستی از مسیر تصاویر و برچسب‌ها
all_images = []
all_ages = []
all_genders = []

for fname in os.listdir(data_dir):
    if fname.lower().endswith('.jpg'):
        full = os.path.join(data_dir, fname)
        try:
            age, gender = parse_label_from_filename(fname)
        except Exception as e:
            continue
        all_images.append(full)
        all_ages.append(age)
        all_genders.append(gender)

all_images = np.array(all_images)
all_ages = np.array(all_ages, dtype=np.float32)
all_genders = np.array(all_genders, dtype=np.int32)

# اگر بخوای فقط سن را پیش‌بینی کنی، جنسیت را می‌توان نادیده گرفت.

# ===============================
# ۳. تقسیم به مجموعه آموزش و اعتبارسنجی
# ===============================
from sklearn.model_selection import train_test_split
img_train, img_val, age_train, age_val = train_test_split(
    all_images, all_ages, test_size=0.2, random_state=42
)

# ===============================
# ۴. ژنراتور داده‌ها (Data Generator)
# ===============================
def make_generator(img_paths, ages, batch_size, is_train=True):
    datagen = ImageDataGenerator(
        rescale=1./255,
        horizontal_flip=is_train,
        rotation_range=15 if is_train else 0,
        width_shift_range=0.1 if is_train else 0,
        height_shift_range=0.1 if is_train else 0,
        zoom_range=0.1 if is_train else 0
    )
    while True:
        idx = np.random.permutation(len(img_paths))
        for i in range(0, len(img_paths), batch_size):
            batch_idx = idx[i:i+batch_size]
            batch_files = img_paths[batch_idx]
            batch_ages = ages[batch_idx]
            batch_imgs = []
            for f in batch_files:
                img = tf.keras.preprocessing.image.load_img(f, target_size=img_size)
                arr = tf.keras.preprocessing.image.img_to_array(img)
                batch_imgs.append(arr)
            batch_imgs = np.array(batch_imgs)
            batch_imgs = datagen.standardize(batch_imgs)
            yield batch_imgs, batch_ages

train_gen = make_generator(img_train, age_train, batch_size, is_train=True)
val_gen = make_generator(img_val, age_val, batch_size, is_train=False)

steps_per_epoch = len(img_train) // batch_size
val_steps = len(img_val) // batch_size

# ===============================
# ۵. ساخت مدل با انتقال یادگیری (مثال: ResNet50)
# ===============================
base = ResNet50(weights='imagenet', include_top=False, input_shape=(img_size[0], img_size[1], 3))
# فریز کردن لایه‌های پایه در ابتدا
for layer in base.layers:
    layer.trainable = False

x = base.output
x = GlobalAveragePooling2D()(x)
x = Dropout(0
